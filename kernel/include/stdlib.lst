FUNCTION(Abs, "Abs(x)", "Returns x as a positive value.",
{
	assert_argc(argc, 1);
	number_t num = NUM(0);
	if(num < 0)
		return basic_mknum(-num);
	else
		return basic_mknum(num);
})

FUNCTION(Print, "Print(...)", "Prints its arguments and adds a newline.",
{
	for(int i = 0; i < argc; i++)
	{
		printf("%v", argv[i]);
	}
	printf("\n");
	return basic_mknull();
})

FUNCTION(Sum, "Sum(...)", "Sums up all arguments.",
{
	number_t sum = 0;
	for(int i = 0; i < argc; i++)
	{
		sum += NUM(i);
	}
	return basic_mknum(sum);
})

FUNCTION(Product, "Product(...)", "Multiplies all arguments.",
{
	number_t sum = 1;
	for(int i = 0; i < argc; i++)
	{
		sum *= NUM(i);
	}
	return basic_mknum(sum);
})

FUNCTION(Sub, "Sub(str, index, [len])", "Returns a substring starting at 1-based index.\nIf len is given, the length of the substring is limited to len.",
{
	if(argc < 2 || argc > 3)
		basic_error(ERR_ARG_COUNT);
	string_t src = STR(0);
	int index = NUM(1) - 1;
	if(index < 0) index = 0;
	int length = TYPE_STR_LEN;
	if(argc == 3)
		length = NUM(2);
	
	int len = str_len(src);
	if(index >= len || length <= 0) {
		return basic_mkstr("");
	}
	len -= index;
	if(length >= len) {
		return basic_mkstr(src + index);
	}
	
	char * dst = basic_alloc(len + 1);
	mem_copy(dst, src + index, length);
	dst[length] = 0;
	return basic_mkstr(dst);
})