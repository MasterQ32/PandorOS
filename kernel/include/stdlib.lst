#ifndef IMPORT
#define IMPORT(x)
#define _IMPORT_GENERATED_
#endif

IMPORT(extern bool shell_has_echo;)
IMPORT(char printsep[64] = "";)

ORDER(Print, "...", "Prints its arguments and adds a newline.",
{
	for(int i = 0; i < argc; i++)
	{
		if(i > 0)
			printf("%s", printsep);
		printf("%v", argv[i]);
	}
	printf("\n");
	return basic_mknull();
})

ORDER(PrintSep, "separator", "Sets the separator that will be printed inbetween the arguments to *Print*.",
{
	assert_argc(argc, 1);
	str_copy(printsep, STR(0));
})

ORDER(Echo, "state", "Sets the echo state of the console. When the state is *On*, the console will echo the results of expressions, when state is *Off* nothing will be printed.",
{
	assert_argc(argc, 1);
	shell_has_echo = (NUM(0) != 0);
})

FUNCTION(Abs, "x", "Returns *x* as a positive value.",
{
	assert_argc(argc, 1);
	number_t num = NUM(0);
	if(num < 0)
		return basic_mknum(-num);
	else
		return basic_mknum(num);
})

FUNCTION(Sum, "...", "Sums up all arguments.",
{
	number_t sum = 0;
	for(int i = 0; i < argc; i++)
	{
		sum += NUM(i);
	}
	return basic_mknum(sum);
})

FUNCTION(Product, "...", "Multiplies all arguments.",
{
	number_t sum = 1;
	for(int i = 0; i < argc; i++)
	{
		sum *= NUM(i);
	}
	return basic_mknum(sum);
})

FUNCTION(Sub, "str, index, [len]", "Returns a substring of *str* starting at 1-based *index*.\nIf *len* is given, the length of the substring is limited to *len*.",
{
	if(argc < 2 || argc > 3)
		basic_error(ERR_ARG_COUNT);
	string_t src = STR(0);
	int index = NUM(1) - 1;
	if(index < 0) index = 0;
	int length = TYPE_STR_LEN;
	if(argc == 3)
		length = NUM(2);
	
	int len = str_len(src);
	if(index >= len || length <= 0) {
		return basic_mkstr("");
	}
	len -= index;
	if(length >= len) {
		return basic_mkstr(src + index);
	}
	
	char * dst = basic_alloc(len + 1);
	mem_copy(dst, src + index, length);
	dst[length] = 0;
	return basic_mkstr(dst);
})

FUNCTION(Length, "str", "Returns the length of the string.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	string_t src = STR(0);
	return basic_mknum(str_len(src));
})

FUNCTION(Malloc, "len", "Allocates *len* bytes of memory and returns a handle to it.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	int len = NUM(0);
	return basic_mknum((int)malloc(len));
})

FUNCTION(Free, "h", "Frees the handle *h* previously allocated by *Malloc()*.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	void *ptr = (void*)(int)NUM(0);
	free(ptr);
})

FUNCTION(Peek, "h, off", "Reads the byte from the memory handle *h* with the given offset *off*",
{
	if(argc != 2) basic_error(ERR_ARG_COUNT);
	char * ptr = (char*)(int)NUM(0);
	int off = NUM(1);
	return basic_mknum(ptr[off]);
})

FUNCTION(Poke, "h, off, val", "Writes the byte *val* to the memory handle *h* with the given offset *off*",
{
	if(argc != 3) basic_error(ERR_ARG_COUNT);
	char * ptr = (char*)(int)NUM(0);
	int off = NUM(1);
	int val = NUM(2);
	ptr[off] = val;
	return basic_mknum(val);
})



#ifdef _IMPORT_GENERATED_
#undef IMPORT
#endif