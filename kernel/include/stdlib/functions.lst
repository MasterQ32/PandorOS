
FUNCTION(
	ToText, "val", 
	"Converts *val* to a text value.\n"
	"\n"
	"*val* can be any type that is printable to the console, even NULL values are allowed.\n"
	"The function will return a string value that contains *val* converted into a text.",
{
	assert_argc(argc, 1);
	int len = str_printf(NULL, "%v", argv[0]);
	char * result = basic_alloc(len + 1);
	str_printf(result, "%v", argv[0]);
	return basic_mkstr(result);
})
	
FUNCTION(
	Ptr, "addr",
	"Converts the number *addr* to a raw pointer.",
{
	assert_argc(argc, 1);
	int ref = NUM(0);
	return basic_mkptr((void*)ref, PTR_RAW);
})

FUNCTION(
	ToNum, "val", 
	"Converts *val* to a numeric value.\n"
	"\n"
	"*val* should be a string value with numeric content, but can contain any type that will be represented as a numeric value when it's printed.\n"
	"The function will return the value into a number and returns it.",
{
	assert_argc(argc, 1);
	if(argv[0].type == TYPE_PTR) {
		return basic_mknum((int)argv[0].pointer.ref);
	}
	int len = str_printf(NULL, "%v", argv[0]);
	char result[len + 1];
	str_printf(result, "%v", argv[0]);
	return basic_mknum(str_to_int(result, 10));
})

FUNCTION(
	Asc, "str", 
	"Returns the codepoint value for the first character of the given string.",
{
	assert_argc(argc, 1);
	return basic_mknum((unsigned char)STR(0)[0]);
})

FUNCTION(
	Chr, "codepoint", 
	"Returns a string with only a single character that is the character with the given *codepoint*.",
{
	assert_argc(argc, 1);
	char * str = basic_alloc(2);
	str[0] = NUM(0);
	str[1] = 0;
	return basic_mkstr(str);
})

FUNCTION(
	Type, "val", 
	"Returns the name of the type of *val*.\n"
	"\n"
	"Possible types are: *NUM*, *TEXT* and *NULL*.",
{
	assert_argc(argc, 1);
	switch(argv[0].type)
	{
		case TYPE_NULL: return basic_mkstr("NULL");
		case TYPE_NUM:  return basic_mkstr("NUM");
		case TYPE_TEXT: return basic_mkstr("TEXT");
		case TYPE_PTR: {
			char * name = basic_alloc(10);
			str_printf(name, "PTR'%d", argv[0].pointer.type);
			return basic_mkstr(name);
		}
		default:        return basic_mkstr("???");
	}
})

FUNCTION(
	Eval, "cmd", 
	"Executes *cmd* and returns its result.\n"
	"\n"
	"This function will invoke the basic interpreter and can execute arbitrary code.",
{
	assert_argc(argc, 1);
	char const * line = STR(0);

	return basic_execute(line);
})

FUNCTION(
	Output, "x, y, ...", 
	"Prints the values passed with *...* at the coordinates (*x*, *y*) to the screen.\nReturns the number of symbols written.",
{
	if(argc < 2)
		basic_error(ERR_ARG_COUNT);
	int x = stdcon->cursor.x;
	int y = stdcon->cursor.y;
	stdcon->cursor.x = NUM(0);
	stdcon->cursor.y = NUM(1);
	int len = 0;
	for(int i = 2; i < argc; i++)
	{
		len += printf("%v", argv[i]);
	}
	stdcon->cursor.x = x;
	stdcon->cursor.y = y;
	return basic_mknum(len);
})

FUNCTION(
	GetKey, "", 
	"Returns the key code of the last key press.",
{
	keyhit_t hit = getkey(false);
	if(hit.flags & khfKeyPress)
		return basic_mknum(hit.key);
	else
		return basic_mknum(0);
})

FUNCTION(
	WaitKey, "", 
	"Waits for a key press and returns the key code of the pressed key.",
{
	do
	{
		keyhit_t hit = getkey(true);
		if(hit.flags & khfKeyPress)
			return basic_mknum(hit.key);
		if(basic_break)
			basic_error(ERR_BREAK);
	} while(true);
})

FUNCTION(Abs, "x", "Returns *x* as a positive value.",
{
	assert_argc(argc, 1);
	number_t num = NUM(0);
	if(num < 0)
		return basic_mknum(-num);
	else
		return basic_mknum(num);
})

FUNCTION(
	Floor, "x", "Returns x rounded down to the next lower integer.",
{
	assert_argc(argc, 1);
	return basic_mknum((int)NUM(0));
})

FUNCTION(
	Round, "x", "Returns x rounded to the next integer.",
{
	assert_argc(argc, 1);
	return basic_mknum((int)(NUM(0) + 0.5));
})

FUNCTION(Sum, "...", "Sums up all arguments.",
{
	number_t sum = 0;
	for(int i = 0; i < argc; i++)
	{
		sum += NUM(i);
	}
	return basic_mknum(sum);
})

FUNCTION(Product, "...", "Multiplies all arguments.",
{
	number_t sum = 1;
	for(int i = 0; i < argc; i++)
	{
		sum *= NUM(i);
	}
	return basic_mknum(sum);
})

FUNCTION(Sub, "str, index, [len]", "Returns a substring of *str* starting at 1-based *index*.\nIf *len* is given, the length of the substring is limited to *len*.",
{
	if(argc < 2 || argc > 3)
		basic_error(ERR_ARG_COUNT);
	string_t src = STR(0);
	int index = NUM(1) - 1;
	if(index < 0) index = 0;
	int length = TYPE_STR_LEN;
	if(argc == 3)
		length = NUM(2);
	
	int len = str_len(src);
	if(index >= len || length <= 0) {
		return basic_mkstr("");
	}
	len -= index;
	if(length >= len) {
		return basic_mkstr(src + index);
	}
	
	char * dst = basic_alloc(len + 1);
	mem_copy(dst, src + index, length);
	dst[length] = 0;
	return basic_mkstr(dst);
})

FUNCTION(Length, "str", "Returns the length of the string.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	string_t src = STR(0);
	return basic_mknum(str_len(src));
})

FUNCTION(Malloc, "len", "Allocates *len* bytes of memory and returns a pointer to it.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	int len = NUM(0);
	return basic_mkptr(malloc(len), PTR_RAW);
})

FUNCTION(Free, "pointer", "Frees the *pointer* previously allocated by *Malloc()*.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	void *ptr = PTR(0, PTR_RAW);
	free(ptr);
})

FUNCTION(Peek, "pointer", "Reads the byte from memory address given with *pointer*.",
{
	if(argc != 1) basic_error(ERR_ARG_COUNT);
	uint8_t * ptr = PTR(0, PTR_RAW);
	return basic_mknum(*ptr);
})

FUNCTION(Poke, "pointer, byte", "Writes *byte* to the memory address given with *pointer*.",
{
	if(argc != 2) basic_error(ERR_ARG_COUNT);
	uint8_t * ptr = PTR(0, PTR_RAW);
	int val = NUM(1);
	*ptr = val;
	return basic_mknum(val);
})

FUNCTION(
	Open, "name, [flags]", 
	"Opens the given file. If *flags* is 1, the file will be created if it doesn't exist.\n"
	"\n"
	"If the file does not exist and it won't be created, an error is thrown.",
{
	if(argc < 1 || argc > 3)
		basic_error(ERR_ARG_COUNT);
	string_t name = STR(0);
	int flags = (argc > 1) ? NUM(1) : FILE_DEFAULT;
	
	file_t * file = file_get(name, flags);
	if(file == NULL)
		basic_error(ERR_INVALID_FILE);
	
	return basic_mkptr(file, PTR_FILE);
})

FUNCTION(
	GetStor, "file",
	"Returns the name of the storage device this *file* is associated with.",
{
	assert_argc(argc, 1);
	file_t * file = PTR(0, PTR_FILE);
	if(file == NULL)
		basic_error(ERR_INVALID_FILE);
	return basic_mkstr(file_storage(file)->name);
})

FUNCTION(
	Exists, "name", 
	"Returns *True* if a file with the given *name* exists.",
{
	assert_argc(argc, 1);
	return basic_mknum(file_get(STR(0), FILE_DEFAULT) != NULL);
})

FUNCTION(GetSize, "file", "Gets the size of *file* in bytes.",
{
	assert_argc(argc, 1);
	file_t * file = PTR(0, PTR_FILE);
	return basic_mknum(file_size(file));
})

FUNCTION(GetType, "file", "Gets the type of *file*.",
{
	assert_argc(argc, 1);
	file_t * file = PTR(0, PTR_FILE);
	return basic_mknum(file_type(file));
})

FUNCTION(GetData, "file", "Gets a pointer to the *file* data.\nMay be invalidated by Resize.",
{
	assert_argc(argc, 1);
	file_t * file = PTR(0, PTR_FILE);
	return basic_mknum((int)file_data(file));
})

FUNCTION(Resize, "file, size", "Resizes *file* to the given size.",
{
	assert_argc(argc, 2);
	file_t * file = PTR(0, PTR_FILE);
	int size = NUM(1);
	file_resize(file, size);
})

FUNCTION(
	MemToStr, "ptr, size",
	"Returns a string containing the *size* bytes of data located at address *ptr*.",
{
	assert_argc(argc, 2);
	int len = NUM(1);
	char const * src = PTR(0, PTR_RAW);
	char * dst = basic_alloc(len + 1);
	mem_copy(dst, src, len);
	dst[len] = 0;
	return basic_mkstr(dst);
})