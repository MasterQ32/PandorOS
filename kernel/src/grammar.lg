%include {
#include "interpreter.h"
#include "basic/var.h"
#include "basic/lexer.h"
#include "basic/arithmetic.h"
#include "string.h"
#include "standard.h"
#include "alloc.h"
#include <stdbool.h>

// Exclude all debug shit
// #define NDEBUG

#include "hal.h"
#include <stdarg.h>
typedef struct file FILE;

#define fprintf(a, ...) hal_debug(__VA_ARGS__)

// epic assertion fake:
static void assert(int x, char const * xstr)
{
	if(x) return;
	hal_debug("Assertion failed: '%s'\n", xstr);
	while(true);
}
#define assert(x) assert(x, #x);

basfunc_f basic_getfunc(char const *name);

typedef struct arg {
	value_t value;
	struct arg *next;
} arg_t;

typedef union {
	value_t val;
	variable_t * var;
	arg_t * arg;
	basfunc_f fun;
} token_t;

static value_t result;

static allocator_t * argalloc;

}

%token_type {token_t}  
%token_prefix TOK_

%left PLUS MINUS.
%left DIVIDE TIMES.
%left AND OR XOR.
%left NOT.
   
%syntax_error {  
  printf("Syntax error!\n");
}
   
program ::= expr(A).                  { result = A.val; }
program ::= expr(A) ASS variable(V).  {
	var_set(V.var, A.val);
	result = A.val;
}

variable(V) ::= VAR(A).                { V = A; }

expr(A) ::= expr(B) MINUS  expr(C). { A.val = val_sub(B.val, C.val); }
expr(A) ::= expr(B) PLUS   expr(C). { A.val = val_add(B.val, C.val); }
expr(A) ::= expr(B) TIMES  expr(C). { A.val = val_mul(B.val, C.val); }
expr(A) ::= expr(B) DIVIDE expr(C). { A.val = val_div(B.val, C.val); }

expr(A) ::= expr(B) AND expr(C). { A.val = val_and(B.val, C.val); }
expr(A) ::= expr(B) OR expr(C).  { A.val = val_or(B.val, C.val); }
expr(A) ::= expr(B) XOR expr(C). { A.val = val_xor(B.val, C.val); }

expr(A) ::= BRO expr(B) BRC. { A = B; }

expr(A) ::= MINUS expr(B). { A.val = val_neg(B.val); }
expr(A) ::= NOT expr(B). { A.val = val_not(B.val); }

expr(A) ::= INTEGER(B). { A = B; }
expr(A) ::= STRING(B). { A = B; }

expr(A) ::= VAR(B). { 
	var_get(B.var, &A.val);
}

expr(A) ::= FUN(F) arglist(B) BRC. {
	arg_t *a;

	int cnt = 0;
	for(a = B.arg; a != NULL; a = a->next)
	{
		cnt++;
	}

	value_t args[cnt];
	
	int i;
	for(a = B.arg, i = 0; a != NULL; a = a->next, i++)
	{
		args[i] = a->value;
	}

	if(F.fun != NULL) {
		A.val = F.fun(cnt, args);
	} else {
		printf("Function not found.\n");
	}
	
}

arglist(A) ::= . { A.arg = NULL; }

arglist(A) ::= expr(B). { 
	A.arg = allocator_alloc(argalloc);
	A.arg->value = B.val;
	A.arg->next = NULL;
}

arglist(A) ::= expr(B) COMMA arglist(C). {
	A.arg = allocator_alloc(argalloc);
	A.arg->value = B.val;
	A.arg->next = C.arg;
}

% code {
	static char prealloc[1024];

	static void *mwrap(size_t size)
	{
		return prealloc;
	}

	static token_t nulltoken = { };
	
	value_t basic_execute(char const *input)
	{
		// Enables tracing on parser errors
		// ParseTrace(10, "TRACE: ");
		
		page_t strpage = pmm_alloc();
		char *literalloc = pmm_getptr(strpage);
		argalloc = allocator_new(sizeof(arg_t));
		
		void* pParser = ParseAlloc (mwrap);
		while(true)
		{
			struct token token = lex(input);
			if(token.type >= 0)
			{
				token_t currtok;
				
				static char buffer[64];
				mem_set(buffer, 0, sizeof(buffer));
				mem_copy(buffer, input, token.length);
				
				switch(token.type)
				{
					case TOK_INTEGER:
					{
						currtok.val = basic_mknum(str_to_int(buffer, 10));
						break;
					}
					case TOK_STRING:
					{
						// Initialize with uninitialized pointer
						currtok.val = basic_mkstr(literalloc);
						
						// then initialize pointer:
						mem_copy(literalloc, buffer + 1, token.length - 2);
						literalloc[token.length - 2] = 0;
						
						// then advande allocation pointer
						literalloc += token.length - 1;
						
						break;
					}
					case TOK_VAR:
					{
						currtok.var = var_byname(buffer);
						break;
					}
					case TOK_FUN:
					{
						// TODO: Set registered function.
						currtok.fun = basic_getfunc(buffer);
						if(currtok.fun == NULL) {
							printf("Function %s not found!", buffer);
						}
						break;
					}
				}
				
				hal_debug("Recognized token: %s(%d)\n", yyTokenName[token.type], token.type);
				
				Parse(pParser, token.type, currtok);
				
				if(token.type == 0)
					break;
			}
			input += token.length;
			if(*input == 0)
				break;
		}
		
		Parse(pParser, 0, nulltoken);
		
		ParseFree(pParser, free );
		
		allocator_delete(argalloc);
		
		pmm_free(strpage);
		
		if(basic_isnull(result) == false) {
			var_setans(result);
		}
		
		return result;
	}

	struct basreg {
		char name[64];
		basfunc_f func;
	};

	static struct basreg functions[1024];
	static int basfunc_cnt = 0;

	void basic_register(char const *name, basfunc_f function)
	{
		functions[basfunc_cnt] = (struct basreg){ "", function };
		
		str_copy(functions[basfunc_cnt].name, name);
		str_cat(functions[basfunc_cnt].name, "("); // Fancy hack to find the tokens instead of the names.
		
		++basfunc_cnt;
	}

	basfunc_f basic_getfunc(char const *name)
	{
		for(int i = 0; i < basfunc_cnt; i++)
		{
			if(str_eq(name, functions[i].name))
				return functions[i].func;
		}
		return NULL;
	}
}
