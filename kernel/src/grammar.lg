%include {
#include "interpreter.h"
#include "basic/var.h"
#include "basic/lexer.h"
#include "basic/arithmetic.h"
#include "string.h"
#include "standard.h"
#include "alloc.h"
#include "malloc.h"
#include "longjmp.h"
#include "file.h"
#include "debug.h"
#include <stdbool.h>

#include "hal.h"
#include <stdarg.h>
typedef struct file FILE;

#define fprintf(a, ...) hal_debug(__VA_ARGS__)

// epic assertion fake:
static void assert(int x, char const * xstr)
{
	if(x) return;
	hal_debug("Assertion failed: '%s'\n", xstr);
	basic_error(ERR_ASSERTION);
}
#define assert(x) assert(x, #x);

basfunc_f basic_getfunc(int type, char const *name);

typedef struct arg {
	value_t value;
	struct arg *next;
} arg_t;

typedef union {
	value_t val;
	variable_t * var;
	arg_t * arg;
	basfunc_f fun;
} token_t;

static value_t result;

static allocator_t * argalloc;

}

%token_type {token_t}  
%token_prefix TOK_

%left PLUS MINUS.
%left DIVIDE TIMES.
%left AND OR XOR.
%left NOT.
   
%syntax_error {  
  basic_error(ERR_SYNTAX_ERROR);
}
	
program ::= . { result = basic_mknull(); }
program ::= expr(A).                  { result = A.val; }
program ::= expr(A) ASS variable(V).  {
	var_set(V.var, A.val);
	result = A.val;
}
program ::= ORDER(O) arglist(A). {
	
	arg_t *a;

	int cnt = 0;
	for(a = A.arg; a != NULL; a = a->next)
	{
		cnt++;
	}

	value_t args[cnt];
	
	int i;
	for(a = A.arg, i = 0; a != NULL; a = a->next, i++)
	{
		args[i] = a->value;
	}

	result = O.fun(cnt, args);
}

variable(V) ::= VAR(A).                { V = A; }

expr(A) ::= expr(B) MINUS  expr(C). { A.val = val_sub(B.val, C.val); }
expr(A) ::= expr(B) PLUS   expr(C). { A.val = val_add(B.val, C.val); }
expr(A) ::= expr(B) TIMES  expr(C). { A.val = val_mul(B.val, C.val); }
expr(A) ::= expr(B) DIVIDE expr(C). { A.val = val_div(B.val, C.val); }

expr(A) ::= expr(B) AND expr(C). { A.val = val_and(B.val, C.val); }
expr(A) ::= expr(B) OR expr(C).  { A.val = val_or(B.val, C.val); }
expr(A) ::= expr(B) XOR expr(C). { A.val = val_xor(B.val, C.val); }

expr(A) ::= BRO expr(B) BRC. { A = B; }

expr(A) ::= MINUS expr(B). { A.val = val_neg(B.val); }
expr(A) ::= NOT expr(B). { A.val = val_not(B.val); }

expr(A) ::= INTEGER(B). { A = B; }
expr(A) ::= BOOL(B). { A = B; }
expr(A) ::= STRING(B). { A = B; }

expr(A) ::= VAR(B). { 
	var_get(B.var, &A.val);
}

expr(A) ::= FUN(F) arglist(B) BRC. {
	arg_t *a;

	int cnt = 0;
	for(a = B.arg; a != NULL; a = a->next)
	{
		cnt++;
	}

	value_t args[cnt];
	
	int i;
	for(a = B.arg, i = 0; a != NULL; a = a->next, i++)
	{
		args[i] = a->value;
	}

	A.val = F.fun(cnt, args);
}

arglist(A) ::= . { A.arg = NULL; }

arglist(A) ::= expr(B). { 
	A.arg = allocator_alloc(argalloc);
	A.arg->value = B.val;
	A.arg->next = NULL;
}

arglist(A) ::= expr(B) COMMA arglist(C). {
	A.arg = allocator_alloc(argalloc);
	A.arg->value = B.val;
	A.arg->next = C.arg;
}

% code {

	static token_t nulltoken = { };
	
	int errorhandler_valid = 0;
	jmp_buf errorhandler;
	static error_t lastError = ERR_SUCCESS;

	error_t basic_lasterror()
	{
		return lastError;
	}
	
	value_t basic_execute2(uint8_t const * tokens, int length)
	{
		basic_memreset();
		
		// ParseTrace(&nulltoken, "PARSER: ");
		
		// hexdump("Executed Code", tokens, length);
		
		void* pParser = ParseAlloc (malloc);
		
		argalloc = allocator_new(sizeof(arg_t));
		
		jmp_buf errhandlersave;
		mem_copy(errhandlersave, errorhandler, sizeof(jmp_buf));
		
		errorhandler_valid += 1;// Allows recursion!
		int errcode = setjmp(errorhandler);
		if(errcode == 0)
		{
			result = basic_mknull();
			for(int i = 0; i < length; )
			{
				int token_type = (char)tokens[i++];
				if(token_type > 0)
				{
					token_t currtok;
					switch(token_type)
					{
						case TOK_INTEGER:
						{
							int ival = *((int*)&tokens[i]);
							currtok.val = basic_mknum(ival);
							i += sizeof(int);
							break;
						}
						case TOK_BOOL:
						{
							currtok.val = basic_mknum(*((bool*)&tokens[i]));
							i += sizeof(bool);
							break;
						}
						case TOK_STRING:
						{
							int len = *((int*)&tokens[i]);
							i += sizeof(int);
							
							currtok.val = basic_mkstr((char const *)&tokens[i]);
							i += len;
							
							break;
						}
						case TOK_VAR:
						{
							int len = *((int*)&tokens[i]);
							i += sizeof(int);
							
							currtok.var = var_byname((char const *)&tokens[i]);
							if(currtok.var == NULL) {
								basic_error(ERR_INVALID_VAR);
							}
							i += len;
							
							break;
						}
						case TOK_FUN:
						{
							int len = *((int*)&tokens[i]);
							i += sizeof(int);
							
							currtok.fun = basic_getfunc(BASIC_FUNCTION, (char const *)&tokens[i]);
							if(currtok.fun == NULL) {
								basic_error(ERR_FUNC_NOT_FOUND);
							}
							i += len;
							
							break;
						}
						case TOK_ORDER:
						{
							int len = *((int*)&tokens[i]);
							i += sizeof(int);
							
							currtok.fun = basic_getfunc(BASIC_ORDER, (char const *)&tokens[i]);
							if(currtok.fun == NULL) {
								basic_error(ERR_FUNC_NOT_FOUND);
							}
							i += len;
							
							break;
						}
					}
					
					Parse(pParser, token_type, currtok);
					
				}
				else if(token_type == TOKEN_INVALID)
				{
					basic_error(ERR_INVALID_TOKEN);
				}
				else if(token_type == TOKEN_EOF || token_type == TOKEN_EOL)
				{
					Parse(pParser, 0, nulltoken);
					
					if(basic_isnull(result) == false) {
						var_setans(result);
						
						// This seems odd, but our temporary work buffer will be
						// released after this function returns, so we
						// copy the persistent 'Ans' variable content to it.
						var_getans(&result);
					}
					
					lastError = ERR_SUCCESS;
				}
				if(token_type == TOKEN_EOF)
					break;
			}
		}
		else
		{
			// We got an error!
			result = basic_mknull();
			lastError = (error_t)errcode;
		}
		errorhandler_valid -= 1; // Allows recursion!
		
		ParseFree(pParser, free );
		
		allocator_delete(argalloc);
		
		mem_copy(errorhandler, errhandlersave, sizeof(jmp_buf));
		
		return result;
	}
}
