%include {
#include "var.h"
#include "basic/lexer.h"
#include "string.h"
#include "standard.h"
#include "alloc.h"
#include <stdbool.h>

// Exclude all debug shit
// #define NDEBUG

#include "hal.h"
#include <stdarg.h>
typedef struct file FILE;

#define fprintf(a, ...) hal_debug(__VA_ARGS__)

// epic assertion fake:
static void assert(int x, char const * xstr)
{
	if(x) return;
	hal_debug("Assertion failed: '%s'\n", xstr);
	while(true);
}
#define assert(x) assert(x, #x);

typedef int value_t;

typedef value_t (*basfunc_f)(int argc, value_t *argv);

typedef struct arg {
	value_t value;
	struct arg *next;
} arg_t;

typedef union {
	value_t number;
	variable_t * var;
	arg_t * arg;
	basfunc_f fun;
} token_t;

static int result;

static allocator_t * argalloc;

}

%token_type {token_t}  
%token_prefix TOK_

%left PLUS MINUS.
%left DIVIDE TIMES.
   
%syntax_error {  
  printf("Syntax error!\n");
}
   
program ::= expr(A).                  { result = A.number; }
program ::= expr(A) ASS variable(V).  {
	var_set(V.var, &A.number);
	result = A.number;
}

variable(V) ::= VAR(A).                { V = A; }

expr(A) ::= expr(B) MINUS  expr(C). { A.number = B.number - C.number; }  
expr(A) ::= expr(B) PLUS   expr(C). { A.number = B.number + C.number; }  
expr(A) ::= expr(B) TIMES  expr(C). { A.number = B.number * C.number; }  
expr(A) ::= expr(B) DIVIDE expr(C). {
	if(C.number != 0){
		A.number = B.number / C.number;
	}else{
		printf("divide by zero\n");
	}
}

expr(A) ::= BRO expr(B) BRC. { A = B; }

expr(A) ::= INTEGER(B). { A = B; }

expr(A) ::= VAR(B). { 
	var_get(B.var, &A.number);
}

expr(A) ::= FUN(F) arglist(B) BRC. {
	arg_t *a;

	int cnt = 0;
	for(a = B.arg; a != NULL; a = a->next)
	{
		cnt++;
	}

	value_t args[cnt];
	
	int i;
	for(a = B.arg, i = 0; a != NULL; a = a->next, i++)
	{
		args[i] = a->value;
	}

	if(F.fun != NULL) {
		A.number = F.fun(cnt, args);
	} else {
		printf("Function not found.\n");
	}
	
}

arglist(A) ::= . { A.arg = NULL; }

arglist(A) ::= expr(B). { 
	A.arg = allocator_alloc(argalloc);
	A.arg->value = B.number;
	A.arg->next = NULL;
}

arglist(A) ::= expr(B) COMMA arglist(C). {
	A.arg = allocator_alloc(argalloc);
	A.arg->value = B.number;
	A.arg->next = C.arg;
}

% code {
	static char prealloc[1024];

	static void *mwrap(size_t size)
	{
		return prealloc;
	}
	
	static value_t demofun(int argc, value_t *argv)
	{
		value_t sum = 0;
		for(int i = 0; i < argc; i++)
		{
			sum += argv[i];
			// printf("[%d] = %d\n", i, argv[i]);
		}
		return sum;
	}

	static token_t nulltoken = { 0 };
	
	int execute(char const *input)
	{
		// Enables tracing on parser errors
		// ParseTrace(10, "TRACE: ");
		
		argalloc = allocator_new(sizeof(arg_t));
		
		void* pParser = ParseAlloc (mwrap);
		while(true)
		{
			struct token token = lex(input);
			if(token.type >= 0)
			{
				token_t currtok;
				
				static char buffer[64];
				mem_set(buffer, 0, sizeof(buffer));
				mem_copy(buffer, input, token.length);
				
				switch(token.type)
				{
					case TOK_INTEGER:
					{
						currtok.number = str_to_int(buffer, 10);
						break;
					}
					case TOK_VAR:
					{
						currtok.var = var_byname(buffer);
						break;
					}
					case TOK_FUN:
					{
						// TODO: Set registered function.
						currtok.fun = &demofun;
						break;
					}
				}
				
				hal_debug("Recognized token: %s(%d)\n", yyTokenName[token.type], token.type);
				
				Parse(pParser, token.type, currtok);
				
				if(token.type == 0)
					break;
			}
			input += token.length;
			if(*input == 0)
				break;
		}
		
		Parse(pParser, 0, nulltoken);
		
		ParseFree(pParser, free );
		
		allocator_delete(argalloc);
		
		return result;
	}
}